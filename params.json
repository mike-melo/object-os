{"name":"Object-os","tagline":"An object-oriented based OS written from scratch in x86 Assembly","body":"### What is ObjectOS and what is its goals?\r\n\r\n* An experiment\r\n* A learning experience on how to write a micro-kernel OS in x86 16-bit (for now) assembly from the ground up\r\n* An attempt at introducing object constructs into an OS as early as possible and to see how it works\r\n* Create a very basic object-oriented language that is essentially the CLI and interface for a programmer\r\n* Have a good time writing it\r\n\r\n### Some high level functionality being aimed for to get things going\r\n* A basic two-stage bootloader for the kernel (DONE)\r\n* A basic CLI (DONE)\r\n* A build process that integrates with VirtualBox to allow for easy regression and testing\r\n* Dynamic module loading and registry to allow interaction between modules (ie calling of procedures)\r\n* Breaking things down into modules that make sense for reuse\r\n* A language construct that allows for the creation of primitive string objects (DONE)\r\n* A very primitive dynamic heap (DONE)\r\n* Ability to associate labels or variable names with a created object\r\n* Storing captured input into an object\r\n* Some basic arithmetic operations where the result can be stored and referenced\r\n* A method like construct that can be attached to objects\r\n\r\nThe aim at this stage is to have a primitive CLI/language/API and some basic building blocks for a programmer to build on top of. \r\n\r\nAmbitious? You betcha! But having a basic roadmap and some fun is a good start!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}